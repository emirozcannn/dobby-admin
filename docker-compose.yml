version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: dobby_database
    restart: unless-stopped
    environment:
      POSTGRES_DB: dobby_cafe
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dobby_cafe"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dobby_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dobby_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dobby_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dobby_backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: dobby_cafe
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: dobby-cafe-super-secret-jwt-key-docker-2024
      JWT_EXPIRES_IN: 24h
      BCRYPT_ROUNDS: 12
      FRONTEND_URL: http://localhost
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
    networks:
      - dobby_network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dobby_frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - dobby_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dobby_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - dobby_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  dobby_network:
    driver: bridge
